---
layout: post
title:  "Ch.6 객체와 자료구조"
date:   2019-09-01 21:03:36 +0530
categories: CleanCode 객체&자료구조
---

**자료 추상화**
- 인터페이스와 get()/set()함수의 적절한 사용
- 객체는 동작을 공개하되 구현은 숨기고, 자료는 추상적으로 표현하자


**자료/객체 비대칭**
- 객체는 자료를 숨기고 함수를 공개한다. 자료 구조는 자료를 그대로 공개하며 별다른 함수는 제공하지 않는다.  
	- 새로운 자료 타입이 필요한 경우 : 클래스 & 객체 지향 기법
	- 새로운 함수가 필요한 경우 : 절차적인 코드 & 자료 구조

**디미터 법칙**
- 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙.
- 객체는 조회 함수(get())로 내부 구조를 공개하면 안된다.
- "클래스 C의 메서드 f는 다음과 같은 객체의 메서드만 호출해야 한다."
	- 클래스 C
	- f가 생성한 객체
	- f인수로 넘어온 객체
	- C인스턴스 변수에 저장된 객체  
#
- 디미터 법칙을 어기는 코드
 1. 기차 충돌
 (ex)final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();
 2. 잡종 구조 : 절반은 객체, 절반은 자료 구조
 3. 구조체 감추기

**자료 전달 객체**
공개 변수만 있고 함수가 없는 클래스, 이런 자료 구조체를 DTO(Data Transfer Object)라고 한다. 일반적인 형태는 빈(bean)구조다.
DTO의 특수한 형태인 활성 레코드는 공개 변수가 있거나 비공개 변수에 get/set함수가 있는 자료 구조이다. 그리고 대게 save나 find와 같은 탐색 함수도 제공한다. 활성 레코드는 자료 구조로만 취급해야 한다. 활성 레코드에 비즈니스 규칙 메소드를 추가하면 자료 구조도 아니고 객체도 아닌 잡종 구조가 나오기 때문이다.